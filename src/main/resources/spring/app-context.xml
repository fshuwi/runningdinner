<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd">

	<import resource="property-configuration.xml" />
	<import resource="datasource.xml" />
	
	<context:annotation-config/>
	
	<context:component-scan 
		base-package="org.runningdinner.repository.jpa, org.runningdinner.event.listener, org.runningdinner.event.publisher" />
	
	<!-- Configure services (respectively service implementations) manually -->    
    <bean id="runningDinnerService" class="org.runningdinner.service.impl.RunningDinnerServiceImpl" />
    
    <bean id="uuidGenerator" class="org.runningdinner.service.impl.DefaultUuidGenerator" />
    
    <bean id="adminUrlGenerator" class="org.runningdinner.service.impl.AdminUrlGenerator" />
    
    <bean id="participantLocationHandlerFactory" class="org.runningdinner.service.TempParticipantLocationHandlerFactory" />
    <bean id="participantLocationHandler" factory-bean="participantLocationHandlerFactory" factory-method="create" />
	
    <!-- enables scanning for @Transactional annotations -->
    <tx:annotation-driven />
        
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" p:dataSource-ref="dataSource">
          <property name="jpaVendorAdapter">
              <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" p:database="${jpa.database}" p:showSql="${jpa.showSql}"/>
          </property>
          <property name="persistenceUnitName" value="runningdinner"/>
          <property  name="loadTimeWeaver">
                  <bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver" />
          </property>
          <!-- <property name="packagesToScan" value="org.runningdinner.core.model"/>-->
          <property name="jpaProperties">
          	<props>
          		<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
          		<prop key="hibernate.dialect">${hibernate.dialect}</prop>
          		<prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
          		<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
          		<prop key="hibernate.format_sql">true</prop> <!-- Will be ignored if showSql==false -->
          	</props>
          </property>
      </bean>
    
      <!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="entityManagerFactory"/>


  	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

    <!--
        Post-processor to perform exception translation on @Repository classes (from native
        exceptions such as JPA PersistenceExceptions to Spring's DataAccessException hierarchy).
    -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

 	<!--
 		Enabled usage of EntityManager during whole http request
	-->      
    <bean class="org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor" id="entityManagerInterceptor" />
       
</beans>
