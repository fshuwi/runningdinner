<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<beans:import resource="property-configuration.xml"/>

	<beans:bean id="customValidator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
	    <beans:property name="validationMessageSource" ref="messageSource" />
	</beans:bean>

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven content-negotiation-manager="cnManager" validator="customValidator" />	

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	
	<beans:bean id="cnManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<beans:property name="defaultContentType" value="text/html" />
		<beans:property name="useJaf" value="true" />
	</beans:bean>
	
	<beans:bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<beans:property name="contentNegotiationManager" ref="cnManager" />
	</beans:bean>
	
	<beans:bean class="org.springframework.web.servlet.view.XmlViewResolver" p:order="1">
		<beans:property name="location" value="classpath:spring/views-spreadsheet.xml" />
	</beans:bean>
	
	<!-- p:order="-1" --> 
 	<beans:bean id="tilesViewResolver" class="org.springframework.web.servlet.view.tiles2.TilesViewResolver" p:order="5" />

	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<beans:property name="definitions">
		 <beans:list>
		  	<beans:value>/WEB-INF/tiles-definitions.xml</beans:value>
		 </beans:list>
		</beans:property>
	</beans:bean>

	<!-- Theoretically it would be possible to create factory method for CommonsMultipartResolver providing custom uploadTempDir -->
	<!-- <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" 
					p:maxUploadSize="50000" p:uploadTempDir="file://D:/Apps/uploadTmp" />-->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" 
					p:maxUploadSize="${upload.max.size}" />				
	

	<context:annotation-config />
	<context:component-scan base-package="org.runningdinner.ui, org.runningdinner.ui.validator, org.runningdinner.ui.error" />
	
	
	<beans:bean id="simpleMappingExceptionResolver" class="org.runningdinner.ui.error.GlobalExceptionHandler">
		<beans:property name="exceptionMappings">
			<beans:map>
				<beans:entry key="org.runningdinner.exceptions.DinnerNotFoundException" value="error/errorDinnerNotFound" />
				<beans:entry key="org.runningdinner.exceptions.InvalidUuidException" value="error/errorInvalidUuid" />
				<beans:entry key="java.lang.UnsupportedOperationException" value="error/errorUnsupported" />
				<beans:entry key="java.lang.RuntimeException" value="error/errorDefault" />
			</beans:map>
		</beans:property>
		
		<beans:property name="defaultErrorView" value="error/errorDefault" />
		<beans:property name="exceptionAttribute" value="ex" />
		<beans:property name="warnLogCategory" value="dummy"/>		
	</beans:bean>
	
	<!-- Used for accessing some configuration stuff in an easy way in footer.jsp -->
	<util:map id="globalProperties" value-type="java.lang.String" key-type="java.lang.String">
		<beans:entry key="contact.mail" value="${contact.mail}" />
		<beans:entry key="github.repo.url" value="${github.repo.url}" />
	</util:map>
	
</beans:beans>
